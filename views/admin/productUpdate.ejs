<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/css/admin/user_management.css">
    <title>product update</title>
    <link rel="icon" type="image/png" href="/images/shoeAura icon.png">

  <!--cropper-->
  <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" rel="stylesheet">
  <style>
         #loadingSpinner {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 9999;
}

.spinner {
    position: relative;
    border: 8px solid rgba(76, 168, 88, 0.3); 
    border-top: 8px solid #4CA858; 
    border-radius: 50%;
    width: 100px;
    height: 100px;
    animation: spin 1.5s linear infinite;
}

.center-image {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 60px; 
    height: 60px;
    border-radius: 50%;
    object-fit: cover; 
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

    .crop-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin-bottom: 20px;
        border: 2px dashed #ddd;
        max-width: 400px;
        padding: 10px;
        border-radius: 10px;
        background-color: #f9f9f9;
    }

    .crop-container img {
        max-width: 400px;
        height: auto;
        margin-bottom: 10px;
    }

    .btn {
        padding: 10px 20px;
        font-size: 14px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

    .btn-primary {
        background-color: #007bff;
        color: #fff;
    }

    .btn-danger {
        background-color: #dc3545;
        color: #fff;
    }

    .crop-preview {
        display: flex;
        max-width: 200px;
        flex-direction: column;
        align-items: center;
        margin-top: 20px;
        border: 2px solid #ddd;
        padding: 10px;
        border-radius: 10px;
    }

    .crop-preview canvas {
        max-width: 200px;
        height: auto;
        margin-bottom: 10px;
    }
</style>
</head>
<body>
    <div class="container">
        <div class="sidebar">
            <a href="/admin/dashboard">Dashboard</a>
            <a href="/admin/usermanagement">User Management</a>
            <a  class="clr" href="/admin/product_management">Products Management</a>
            <a href="/admin/order_management">Order Management</a>
            <a href="/admin/category_management">Category Management</a>
            <a href="/admin/coupon_management">Coupons Management</a>
        </div>

        <div class="main-content">
            <nav class="navbar">
                <a class="navbar-brand"><div id="colorlib-logo"><img class="logo-header" src="/images/new shoeAura.png" alt=""></div></a>
            </nav>

            <div class="content">
                <h1>Product Update</h1>


                <!-- Add User Form -->
                <div class="add-user-form">
                    <h2>Update Product</h2>
                    <form  id="productForm"  enctype="multipart/form-data">
                        <!-- Product Name -->
                        <div class="form-group">
                            <label for="Productname">Product name:</label>
                            <input type="text" id="productname" name="productname" placeholder="Enter Product name" value="<%= productData.productname %>" required>
                        </div>
                    
                        <!-- Description -->
                        <div class="form-group">
                            <label for="Description">Description:</label>
                            <input type="text" id="description" name="description" placeholder="Enter Description" value="<%= productData.description %>" required>
                        </div>
                    
                        <!-- Category -->
                        <div class="form-group"> 
                            <label for="Category">Category:</label> 
                            <select id="Category" name="category" class="dropdownOrsize" required> 
                                <option value="" disabled>Select Category</option> 
                                <% categoryData.forEach(function(category) { %> 
                                    <option value="<%= category._id %>" <%= category._id.toString() === productData.category._id.toString() ? 'selected' : '' %>><%= category.categoryname %></option> 
                                <% }); %> 
                            </select> 
                        </div>
                    
                        <!-- Brand -->
                        <div class="form-group">
                            <label for="Brand">Brand:</label>
                            <input type="text" id="Brand" name="brand" placeholder="Enter Brand" value="<%= productData.brand%>" required>
                        </div>
                    
                        <!-- OG Price -->
                        <div class="form-group">
                            <label for="OGPrice">Original Price:</label>
                            <input type="number" id="OGPrice" name="price" placeholder="Enter Price" value="<%= productData.price %>" required>
                        </div>                      
                    
                        <!-- Product Offer -->
                        <div class="form-group">
                            <label for="ProductOffer">Product Offer:</label>
                            <input type="number" id="ProductOffer" name="productOffer" placeholder="Enter Product Offer" min="0" max="100" value="<%= productData.productOffer %>">
                        </div>
                    
                     <!-- Colors -->
                     <div class="form-group">
                        <label for="ProductOffer">Product Color:</label>
                        <input
                          type="text"
                          id="colors"
                          name="colors"
                          value="<%= productData.colors %>"
                          placeholder="Enter Product Color"
                        />
                      </div>

                        <!-- Shoe Sizes and Quantities -->
                        <div class="form-group">
                            <label>Product Sizes and Quantities:</label>
                            <div id="size-quantity-container">
                              <% if (productData.sizes) { %>
                                <% Object.entries(productData.sizes).forEach(([size, quantity]) => { %>
                                  <div class="form-group existing-entry">
                                    <label>Size:
                                      <input type="text" name="sizes[][size]" value="<%= size %>" placeholder="Enter size" required>
                                    </label>
                                    <label>Quantity:
                                      <input type="number" name="sizes[][quantity]" value="<%= quantity %>" min="0" placeholder="Enter quantity" required>
                                    </label>
                                    <button type="button" class="btn btn-danger remove-btn">Remove</button>
                                  </div>
                                <% }) %>
                              <% } %>
                            </div>
                            <button type="button" class="dropdownOrsize" id="add-size-quantity">Add Size and Quantity</button>
                          </div>
                          
                                         <!-- Product Images -->
                            <label for="images">Product Images:</label>
                            <div id="image-preview">
                                <% if (productData.productImages && productData.productImages.length > 0) { %>
                                    <% productData.productImages.forEach((image, index) => { %>
                                        <div class="image-container" data-index="<%= index %>">
                                            <!-- Display Existing Image -->
                                            <img src="<%= image.startsWith('http') ? image : '/uploads/' + image %>" 
                                                 alt="Product Image <%= index + 1 %>" style="width: 100px; margin: 5px;">
                                            
                                            <!-- Remove Existing Image -->
                                            <button type="button" class="btn btn-danger" onclick="removeImage('<%= index %>')">Remove</button>
                                            
                                            <!-- File Input for Updating Image -->
                                            <label for="image-file-<%= index %>">Update Image</label>
                                            <input type="hidden" id="image-file-<%= index %>" name="croppedImages" accept="image/*" onchange="handleSingleImage(event, '<%= index %>')">
                                            
                                            <!-- Hidden Input for Index -->
                                            <input type="hidden" name="imageIndex[]" value="<%= index %>">
                                        </div>
                                    <% }); %>
                                <% } else { %>
                                    <p>No images available.</p>
                                <% } %>
                            </div>
                            
                            <div class="mb-4">
                                <label class="form-label text-white">Upload New Images</label>
                                <div id="fileInputsContainer"></div>
                                <div id="cropperContainers"></div>
                            </div>
                            <div id="loadingSpinner" style="display: none;">
                                <div class="spinner">
                                    <img src="/images/shoeAura icon.png" alt="Loading" class="center-image">
                                </div>
                            </div>
                            <button type="submit" class="btn add-user-btn">Update Product</button>

                        </div>
                     <!-- Submit Button -->
                    </form>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>

   <script>
   document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('productForm');
    const fileInputsContainer = document.getElementById('fileInputsContainer');
    const cropperContainer = document.getElementById('cropperContainers');
    const existingImages = new Set();
    const croppers = [];
    const maxImages = 4; 
    let currentImageCount = 0;
    const croppedImages = new Map(); // Stores the cropped image blobs
    const removedImages = new Set();
    const existingImageBlobs = new Map(); // Store existing image blobs by index

    function initializeExistingImages() {
        document.querySelectorAll('.image-container').forEach((container) => {
            const index = container.dataset.index;
            existingImages.add(index);
            // Convert existing image to blob and store it
            const imageUrl = container.querySelector('img').src;
            convertImageToBlob(imageUrl, index);
        });
        currentImageCount = document.querySelectorAll('.image-container').length || 0;
        ensureFourInputs();
    }

    const convertImageToBlob = (url, index) => {
        fetch(url)
            .then((response) => response.blob())
            .then((blob) => {
                existingImageBlobs.set(index, blob);
            })
            .catch((error) => console.error('Error converting image to blob:', error));
    };

    const ensureFourInputs = () => {
        while (currentImageCount < maxImages) {
            createFileInput();
        }
    };

    const createFileInput = () => {
        const div = document.createElement('div');
        div.classList.add('mb-3');
        div.innerHTML = `
            <input type="file" id="upload${currentImageCount + 1}" accept="image/*" 
            onchange="handleSingleImage(event, ${currentImageCount + 1})" />
            <label for="upload${currentImageCount + 1}" class="form-label text-white">
                Image ${currentImageCount + 1}
            </label>
        `;
        fileInputsContainer.appendChild(div);
        currentImageCount++;
    };

    window.removeImage = (index) => {
        const container = document.querySelector(`.image-container[data-index="${index}"]`);
        if (container) {
            container.remove();
            removedImages.add(index);
            existingImages.delete(index);
            existingImageBlobs.delete(index); // Remove the blob
            currentImageCount--;
            ensureFourInputs();
        }
    };

    window.handleSingleImage = (event, index) => {
        const file = event.target.files[0];
        if (!file) return;

        const reader = new FileReader();
        reader.onload = (e) => {
            const div = document.createElement('div');
            div.classList.add('crop-container');
            div.id = `crop-container-${index}`;

            const img = document.createElement('img');
            img.src = e.target.result;
            img.id = `cropImage${index}`;
            div.appendChild(img);

            const previewButton = document.createElement('button');
            previewButton.textContent = 'Preview Cropped Image';
            previewButton.classList.add('btn', 'btn-primary', 'mt-2');
            previewButton.type = 'button';
            previewButton.onclick = () => previewCroppedImage(index);
            div.appendChild(previewButton);

            cropperContainer.appendChild(div);

            const cropper = new Cropper(img, { aspectRatio: 1, viewMode: 1 });
            croppers[index - 1] = cropper;
        };
        reader.readAsDataURL(file);
    };

    const previewCroppedImage = (index) => {
        const cropper = croppers[index - 1];
        if (!cropper) return;

        const canvas = cropper.getCroppedCanvas();
        canvas.toBlob((blob) => {
            if (blob) {
                croppedImages.set(index, blob);

                const previewDiv = document.createElement('div');
                previewDiv.classList.add('crop-preview');
                const imgElement = document.createElement('img');
                imgElement.src = URL.createObjectURL(blob);
                imgElement.style.maxWidth = '200px';
                imgElement.style.height = 'auto';
                previewDiv.appendChild(imgElement);

                const removeButton = document.createElement('button');
                removeButton.textContent = 'Remove Cropped Image';
                removeButton.classList.add('btn', 'btn-danger', 'mt-2');
                removeButton.type = 'button';
                removeButton.onclick = () => {
                    previewDiv.remove();
                    croppedImages.delete(index);
                };
                previewDiv.appendChild(removeButton);

                cropperContainer.appendChild(previewDiv);
                document.getElementById(`crop-container-${index}`).remove();
            }
        });
    };

    form.addEventListener('submit', async (e) => {
        e.preventDefault();

        document.getElementById('loadingSpinner').style.display = 'flex';

        const formData = new FormData(form);
        const productId = "<%= productData._id %>";

        const sizes = {};
        const sizeInputs = document.querySelectorAll('input[name="sizes[][size]"]');
        const quantityInputs = document.querySelectorAll('input[name="sizes[][quantity]"]');

        sizeInputs.forEach((input, index) => {
            const sizeKey = input.value.trim().toLowerCase();
            const quantity = parseInt(quantityInputs[index].value, 10) || 0;
            if (sizeKey && quantity > 0) {
                sizes[sizeKey] = quantity;
            }
        });

        formData.set('sizes', JSON.stringify(sizes));

        existingImages.forEach((index) => {
            const fileInput = document.querySelector(`#upload${index}`);
            if (fileInput && fileInput.files[0]) {
                formData.append('croppedImages', fileInput.files[0]);
            } else {
                // Append the blob for existing images
                const existingBlob = existingImageBlobs.get(index);
                if (existingBlob) {
                    formData.append('croppedImages', existingBlob, `image_${index}.png`);
                }
            }
        });

        // Ensure cropped images are processed before submission
        await processCroppedImages(formData);

        try {
            const response = await fetch(`/admin/productUpdate/${productId}`, {
                method: 'POST',
                body: formData,
            });

            const data = await response.json();
            document.getElementById('loadingSpinner').style.display = 'none';
            if (data.success) {
                Swal.fire('Success', data.message, 'success').then(() => {
                    window.location.href = '/admin/product_management';
                });
            } else {
                Swal.fire('Error', data.message, 'error');
            }
        } catch (error) {
            console.error('Error', error);
            Swal.fire('Error', 'Server Error Occurred', 'error');
        }
    });

    const processCroppedImages = async (formData) => {
        const promises = [];
        croppedImages.forEach((blob, index) => {
            promises.push(
                new Promise((resolve) => {
                    formData.append('croppedImages', blob, `image_${index}.png`);
                    resolve();
                })
            );
        });
        await Promise.all(promises);
    };

    initializeExistingImages();
});

</script>


</body>
</html>
